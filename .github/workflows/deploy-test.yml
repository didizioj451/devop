name: Deploy to Test Server

on:
  push:
    branches: [ develop ]
  pull_request:
    types: [ opened, synchronize ]

jobs:
  deploy-test:
    runs-on: ubuntu-latest
    environment:
      name: test
      url: http://${{ secrets.TEST_SERVER_HOST }}:8000

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Deploy to test server
      env:
        HOST: ${{ secrets.TEST_SERVER_HOST }}
        USER: ${{ secrets.TEST_SERVER_USER }}
        PORT: ${{ secrets.TEST_SERVER_PORT }}
      run: |
        ssh -o StrictHostKeyChecking=no -p $PORT $USER@$HOST << 'EOF'
          cd /var/www/django-devops-test
          git pull origin develop
          docker-compose -f docker/docker-compose.yml down
          docker-compose -f docker/docker-compose.yml up --build -d
          sleep 15
          docker-compose -f docker/docker-compose.yml exec -T web python manage.py migrate
          docker-compose -f docker/docker-compose.yml exec -T web python manage.py collectstatic --noinput
        EOF
        
    - name: Health check
      run: |
        sleep 30
        curl -f http://${{ secrets.TEST_SERVER_HOST }}:8000/health/ || exit 1
        
    - name: Comment PR with test URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ DÃ©ploiement de test rÃ©ussi!\n\nðŸ“± Application disponible sur: http://${{ secrets.TEST_SERVER_HOST }}:8000\n\nðŸ“‹ Logs: `docker-compose logs -f`'
          })